name: '[Monitor] BYOVD & EDR Evasion Projects & Updates'
on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

jobs:
  discover:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}

      - name: Setup GitHub CLI and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GH_PAT }}" | gh auth login --with-token

      - name: Upload debug files
        if: always() # 即使失败也运行
        uses: actions/upload-artifact@v4
        with:
          name: debug-files
          path: |
            api_response.json
            latest_results.json
          retention-days: 1
          
      - name: Fetch latest project updates
        run: |
          QUERY="%22BYOVD%22%20AND%20(kill%20OR%20antiav%20OR%20antiedr)%20in:name,description,readme"
          API_URL="https://api.github.com/search/repositories?q=$QUERY&sort=updated&order=desc&per_page=30"
          echo "调用API: $API_URL"
          
          # 获取完整的API响应
          gh api "$API_URL" > api_response.json
          
          # 使用jq从响应中提取items数组并格式化为每行一个JSON对象
          jq -c '.items[] | {full_name, html_url, description, stargazers_count, updated_at, pushed_at, created_at, topics }' api_response.json > latest_results.json
          
          # 提取项目URL
          jq -r '.html_url' latest_results.json > current_urls.txt
        env:
          GH_FORCE_TTY: 0

      - name: Retrieve previous state
        run: |
          if [ -f previous_results.json ]; then
            cp previous_results.json previous_results_backup.json
            jq -r '.html_url' previous_results.json > previous_urls.txt
          else
            touch previous_urls.txt
            echo "[]" > previous_results_backup.json
          fi

      - name: Identify new and updated projects
        id: check_changes
        run: |
          grep -Fxv -f previous_urls.txt current_urls.txt > new_items.txt || true
          NEW_COUNT=$(wc -l < new_items.txt | tr -d ' ')
          echo "发现 $NEW_COUNT 个新项目"

          # 创建Python脚本来检测更新

          # 执行Python脚本
          python3 ./detect_updates.py

          UPDATED_COUNT=$(wc -l < updated_items.txt | tr -d ' ')
          echo "发现 $UPDATED_COUNT 个项目有重要更新"

          TOTAL_CHANGES=$((NEW_COUNT + UPDATED_COUNT))
          if [ $TOTAL_CHANGES -gt 0 ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "CHANGE_COUNT=$TOTAL_CHANGES" >> $GITHUB_ENV
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "CHANGE_COUNT=0" >> $GITHUB_ENV
          fi

      - name: Generate RSS feed for changes
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          CURRENT_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          RSS_ITEM_FILE="rss_items.xml"

          if [ -s new_items.txt ]; then
            jq --slurpfile new_urls new_items.txt -r --arg date "$CURRENT_DATE" '
              .[] | select(.html_url as $u | $new_urls[] | index($u)) |
              @html "  <item>\n    <title>🚀 新项目: \(.full_name)</title>\n    <link>\(.html_url)</link>\n    <description>新发现的BYOVD/EDR对抗项目。描述: \(.description // \"No description\" | @html)</description>\n    <pubDate>\($date)</pubDate>\n    <guid isPermaLink=\"true\">\(.html_url)?new=1</guid>\n  </item>"
            ' latest_results.json > $RSS_ITEM_FILE
          fi

          if [ -s updated_items.txt ]; then
            jq --slurpfile updated_urls updated_items.txt -r --arg date "$CURRENT_DATE" '
              .[] | select(.html_url as $u | $updated_urls[] | index($u)) |
              @html "  <item>\n    <title>📢 更新: \(.full_name)</title>\n    <link>\(.html_url)</link>\n    <description>项目有重要更新，可能发布了新版本或添加了新功能。描述: \(.description // \"No description\" | @html)</description>\n    <pubDate>\($date)</pubDate>\n    <guid isPermaLink=\"true\">\(.html_url)?updated=\(now|floor)</guid>\n  </item>"
            ' latest_results.json >> $RSS_ITEM_FILE
          fi

      - name: Update RSS feed and persist state
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          # 创建Python脚本来更新RSS

          python3 ./update_rss.py

          # 保存当前完整状态，用于下次比较
          cp latest_results.json previous_results.json
          cp current_urls.txt previous_urls.txt

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add feed.xml previous_results.json previous_urls.txt
          git commit -m "CI: Found ${{ env.CHANGE_COUNT }} changes ($NEW_COUNT new, $UPDATED_COUNT updated)"
          git push

      - name: No changes notification
        if: steps.check_changes.outputs.has_changes == 'false'
        run: |
          date +"%Y-%m-%d %H:%M:%S - No changes detected" >> monitor.log
          git add monitor.log
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git commit -m "CI: Monitoring completed, no changes" || exit 0
          git push || exit 0
